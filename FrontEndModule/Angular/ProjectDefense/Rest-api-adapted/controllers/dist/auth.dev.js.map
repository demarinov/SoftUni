{"version":3,"sources":["auth.js"],"names":["require","userModel","tokenBlacklistModel","utils","authCookieName","bsonToJson","data","JSON","parse","stringify","removePassword","password","__v","userData","register","req","res","next","body","tel","email","username","repeatPassword","create","then","createdUser","token","jwt","createToken","id","_id","process","env","NODE_ENV","cookie","httpOnly","sameSite","secure","status","send","err","name","code","field","message","split","substring","lastIndexOf","login","findOne","user","Promise","all","matchPassword","match","logout","cookies","clearCookie","getProfileInfo","userId","json","editProfileInfo","findOneAndUpdate","runValidators","x","module","exports"],"mappings":"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","sourcesContent":["const {\r\n    userModel,\r\n    tokenBlacklistModel\r\n} = require('../models');\r\n\r\nconst utils = require('../utils');\r\nconst { authCookieName } = require('../app-config');\r\n\r\nconst bsonToJson = (data) => { return JSON.parse(JSON.stringify(data)) };\r\nconst removePassword = (data) => {\r\n    const { password, __v, ...userData } = data;\r\n    return userData\r\n}\r\n\r\nfunction register(req, res, next) {\r\n    const { tel, email, username, password, repeatPassword } = req.body;\r\n\r\n    return userModel.create({ tel, email, username, password })\r\n        .then((createdUser) => {\r\n            createdUser = bsonToJson(createdUser);\r\n            createdUser = removePassword(createdUser);\r\n\r\n            const token = utils.jwt.createToken({ id: createdUser._id });\r\n            if (process.env.NODE_ENV === 'production') {\r\n                res.cookie(authCookieName, token, { httpOnly: true, sameSite: 'none', secure: true })\r\n            } else {\r\n                res.cookie(authCookieName, token, { httpOnly: true })\r\n            }\r\n            res.status(200)\r\n                .send(createdUser);\r\n        })\r\n        .catch(err => {\r\n            if (err.name === 'MongoError' && err.code === 11000) {\r\n                let field = err.message.split(\"index: \")[1];\r\n                field = field.split(\" dup key\")[0];\r\n                field = field.substring(0, field.lastIndexOf(\"_\"));\r\n\r\n                res.status(409)\r\n                    .send({ message: `This ${field} is already registered!` });\r\n                return;\r\n            }\r\n            next(err);\r\n        });\r\n}\r\n\r\nfunction login(req, res, next) {\r\n    const { email, password } = req.body;\r\n\r\n    userModel.findOne({ email })\r\n        .then(user => {\r\n            return Promise.all([user, user ? user.matchPassword(password) : false]);\r\n        })\r\n        .then(([user, match]) => {\r\n            if (!match) {\r\n                res.status(401)\r\n                    .send({ message: 'Wrong email or password' });\r\n                return\r\n            }\r\n            user = bsonToJson(user);\r\n            user = removePassword(user);\r\n\r\n            const token = utils.jwt.createToken({ id: user._id });\r\n\r\n            if (process.env.NODE_ENV === 'production') {\r\n                res.cookie(authCookieName, token, { httpOnly: true, sameSite: 'none', secure: true })\r\n            } else {\r\n                res.cookie(authCookieName, token, { httpOnly: true })\r\n            }\r\n            res.status(200)\r\n                .send(user);\r\n        })\r\n        .catch(next);\r\n}\r\n\r\nfunction logout(req, res) {\r\n    const token = req.cookies[authCookieName];\r\n\r\n    tokenBlacklistModel.create({ token })\r\n        .then(() => {\r\n            res.clearCookie(authCookieName)\r\n                .status(204)\r\n                .send({ message: 'Logged out!' });\r\n        })\r\n        .catch(err => res.send(err));\r\n}\r\n\r\nfunction getProfileInfo(req, res, next) {\r\n    const { _id: userId } = req.user;\r\n\r\n    userModel.findOne({ _id: userId }, { password: 0, __v: 0 }) //finding by Id and returning without password and __v\r\n        .then(user => { res.status(200).json(user) })\r\n        .catch(next);\r\n}\r\n\r\nfunction editProfileInfo(req, res, next) {\r\n    const { _id: userId } = req.user;\r\n    const { tel, username, email } = req.body;\r\n\r\n    userModel.findOneAndUpdate({ _id: userId }, { tel, username, email }, { runValidators: true, new: true })\r\n        .then(x => { res.status(200).json(x) })\r\n        .catch(next);\r\n}\r\n\r\nmodule.exports = {\r\n    login,\r\n    register,\r\n    logout,\r\n    getProfileInfo,\r\n    editProfileInfo,\r\n}\r\n"],"file":"auth.dev.js"}