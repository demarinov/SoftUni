{"version":3,"sources":["auth.js"],"names":["require","userModel","tokenBlacklistModel","utils","authCookieName","bsonToJson","data","JSON","parse","stringify","removePassword","password","__v","_objectWithoutProperties","register","res","next","_req$body","req","body","email","username","repeatPassword","create","tel","then","createdUser","token","jwt","createToken","id","_id","process","env","httpOnly","sameSite","secure","cookie","status","err","userData","name","code","field","message","split","lastIndexOf","send","concat","_req$body2","user","matchPassword","_ref","_ref2","_slicedToArray","NODE_ENV","logout","cookies","clearCookie","Promise","userId","json","editProfileInfo","match","_req$body3","findOneAndUpdate","runValidators","new","x","login","getProfileInfo"],"mappings":"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","file":"auth.min.js","sourcesContent":["const {\r\n    userModel,\r\n    tokenBlacklistModel\r\n} = require('../models');\r\n\r\nconst utils = require('../utils');\r\nconst { authCookieName } = require('../app-config');\r\n\r\nconst bsonToJson = (data) => { return JSON.parse(JSON.stringify(data)) };\r\nconst removePassword = (data) => {\r\n    const { password, __v, ...userData } = data;\r\n    return userData\r\n}\r\n\r\nfunction register(req, res, next) {\r\n    const { tel, email, username, password, repeatPassword } = req.body;\r\n\r\n    return userModel.create({ tel, email, username, password })\r\n        .then((createdUser) => {\r\n            createdUser = bsonToJson(createdUser);\r\n            createdUser = removePassword(createdUser);\r\n\r\n            const token = utils.jwt.createToken({ id: createdUser._id });\r\n            if (process.env.NODE_ENV === 'production') {\r\n                res.cookie(authCookieName, token, { httpOnly: true, sameSite: 'none', secure: true })\r\n            } else {\r\n                res.cookie(authCookieName, token, { httpOnly: true })\r\n            }\r\n            res.status(200)\r\n                .send(createdUser);\r\n        })\r\n        .catch(err => {\r\n            if (err.name === 'MongoError' && err.code === 11000) {\r\n                let field = err.message.split(\"index: \")[1];\r\n                field = field.split(\" dup key\")[0];\r\n                field = field.substring(0, field.lastIndexOf(\"_\"));\r\n\r\n                res.status(409)\r\n                    .send({ message: `This ${field} is already registered!` });\r\n                return;\r\n            }\r\n            next(err);\r\n        });\r\n}\r\n\r\nfunction login(req, res, next) {\r\n    const { email, password } = req.body;\r\n\r\n    userModel.findOne({ email })\r\n        .then(user => {\r\n            return Promise.all([user, user ? user.matchPassword(password) : false]);\r\n        })\r\n        .then(([user, match]) => {\r\n            if (!match) {\r\n                res.status(401)\r\n                    .send({ message: 'Wrong email or password' });\r\n                return\r\n            }\r\n            user = bsonToJson(user);\r\n            user = removePassword(user);\r\n\r\n            const token = utils.jwt.createToken({ id: user._id });\r\n\r\n            if (process.env.NODE_ENV === 'production') {\r\n                res.cookie(authCookieName, token, { httpOnly: true, sameSite: 'none', secure: true })\r\n            } else {\r\n                res.cookie(authCookieName, token, { httpOnly: true })\r\n            }\r\n            res.status(200)\r\n                .send(user);\r\n        })\r\n        .catch(next);\r\n}\r\n\r\nfunction logout(req, res) {\r\n    const token = req.cookies[authCookieName];\r\n\r\n    tokenBlacklistModel.create({ token })\r\n        .then(() => {\r\n            res.clearCookie(authCookieName)\r\n                .status(204)\r\n                .send({ message: 'Logged out!' });\r\n        })\r\n        .catch(err => res.send(err));\r\n}\r\n\r\nfunction getProfileInfo(req, res, next) {\r\n    const { _id: userId } = req.user;\r\n\r\n    userModel.findOne({ _id: userId }, { password: 0, __v: 0 }) //finding by Id and returning without password and __v\r\n        .then(user => { res.status(200).json(user) })\r\n        .catch(next);\r\n}\r\n\r\nfunction editProfileInfo(req, res, next) {\r\n    const { _id: userId } = req.user;\r\n    const { tel, username, email } = req.body;\r\n\r\n    userModel.findOneAndUpdate({ _id: userId }, { tel, username, email }, { runValidators: true, new: true })\r\n        .then(x => { res.status(200).json(x) })\r\n        .catch(next);\r\n}\r\n\r\nmodule.exports = {\r\n    login,\r\n    register,\r\n    logout,\r\n    getProfileInfo,\r\n    editProfileInfo,\r\n}\r\n"]}