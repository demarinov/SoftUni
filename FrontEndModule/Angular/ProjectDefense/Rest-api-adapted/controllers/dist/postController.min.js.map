{"version":3,"sources":["postController.js"],"names":["require","userModel","themeModel","postModel","newPost","text","userId","themeId","create","then","post","Promise","all","updateOne","_id","$push","posts","$addToSet","themes","findByIdAndUpdate","subscribers","new","req","Number","limit","res","status","json","params","user","next","editPost","postText","body","findOneAndUpdate","postId","updatedPost","getLatestsPosts","message","createPost","_req$params","findOneAndDelete","_","$pull","updatedTheme","_ref3","deletedOne","console","log","likes","deletePost","like"],"mappings":"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","file":"postController.min.js","sourcesContent":["const { userModel, themeModel, postModel } = require('../models');\r\n\r\nfunction newPost(text, userId, themeId) {\r\n    return postModel.create({ text, userId, themeId })\r\n        .then(post => {\r\n            return Promise.all([\r\n                userModel.updateOne({ _id: userId }, { $push: { posts: post._id }, $addToSet: { themes: themeId } }),\r\n                themeModel.findByIdAndUpdate({ _id: themeId }, { $push: { posts: post._id }, $addToSet: { subscribers: userId } }, { new: true })\r\n            ])\r\n        })\r\n}\r\n\r\nfunction getLatestsPosts(req, res, next) {\r\n    const limit = Number(req.query.limit) || 0;\r\n\r\n    postModel.find()\r\n        .sort({ created_at: -1 })\r\n        .limit(limit)\r\n        .populate('themeId userId')\r\n        .then(posts => {\r\n            res.status(200).json(posts)\r\n        })\r\n        .catch(next);\r\n}\r\n\r\nfunction createPost(req, res, next) {\r\n    const { themeId } = req.params;\r\n    const { _id: userId } = req.user;\r\n    const { postText } = req.body;\r\n\r\n    newPost(postText, userId, themeId)\r\n        .then(([_, updatedTheme]) => res.status(200).json(updatedTheme))\r\n        .catch(next);\r\n}\r\n\r\nfunction editPost(req, res, next) {\r\n\r\n    const { postId } = req.params;\r\n    const { postText } = req.body;\r\n    const { _id: userId } = req.user;\r\n\r\n    // if the userId is not the same as this one of the post, the post will not be updated\r\n    postModel.findOneAndUpdate({ _id: postId, userId}, { text: postText }, { new: true })\r\n        .then(updatedPost => {\r\n            if (updatedPost) {\r\n                res.status(200).json(updatedPost);\r\n            }\r\n            else {\r\n                res.status(401).json({ message: `Not allowed!` });\r\n            }\r\n        })\r\n        .catch(next);\r\n}\r\n\r\nfunction deletePost(req, res, next) {\r\n    const { postId, themeId } = req.params;\r\n    const { _id: userId } = req.user;\r\n\r\n    Promise.all([\r\n        postModel.findOneAndDelete({ _id: postId, userId }),\r\n        userModel.findOneAndUpdate({ _id: userId }, { $pull: { posts: postId } }),\r\n        themeModel.findOneAndUpdate({ _id: themeId }, { $pull: { posts: postId } }),\r\n    ])\r\n        .then(([deletedOne, _, __]) => {\r\n            if (deletedOne) {\r\n                res.status(200).json(deletedOne)\r\n            } else {\r\n                res.status(401).json({ message: `Not allowed!` });\r\n            }\r\n        })\r\n        .catch(next);\r\n}\r\n\r\nfunction like(req, res, next) {\r\n    const { postId } = req.params;\r\n    const { _id: userId } = req.user;\r\n\r\n    console.log('like')\r\n\r\n    postModel.updateOne({ _id: postId }, { $addToSet: { likes: userId } }, { new: true })\r\n        .then(() => res.status(200).json({ message: 'Liked successful!' }))\r\n        .catch(next)\r\n}\r\n\r\nmodule.exports = {\r\n    getLatestsPosts,\r\n    newPost,\r\n    createPost,\r\n    editPost,\r\n    deletePost,\r\n    like,\r\n}\r\n"]}