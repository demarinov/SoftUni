{"version":3,"sources":["register.component.ts"],"names":["core_1","require","forms_1","utils_1","RegisterComponent","formBuilder","authService","router","this","passwordControl","FormControl","Validators","required","minLength","registerFormGroup","group","username","email","emailValidator","passwords","FormGroup","password","rePassword","passwordMatch","tel","telRegion","Object","defineProperty","prototype","controls","ngOnInit","handleRegister","_this","console","log","value","_a","body","register$","subscribe","next","data","navigate","error","err","errorMessage","SERVICE_UNAVAILABLE_ERROR","__decorate","Component","selector","templateUrl","styleUrls","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,QAAAD,QAAA,kBAIAE,QAAAF,QAAA,iBAOAG,kBAAA,WAsBE,SAAAA,EAAoBC,EACVC,EACAC,GAFUC,KAAAH,YAAAA,EACVG,KAAAF,YAAAA,EACAE,KAAAD,OAAAA,EAfVC,KAAAC,gBAAkB,IAAIP,QAAAQ,YAAY,KAAM,CAACR,QAAAS,WAAWC,SAAUV,QAAAS,WAAWE,UAAU,KAEnFL,KAAAM,kBAA+BN,KAAKH,YAAYU,MAAM,CACpDC,SAAY,IAAId,QAAAQ,YAAY,KAAM,CAACR,QAAAS,WAAWC,SAAUV,QAAAS,WAAWE,UAAU,KAC7EI,MAAS,IAAIf,QAAAQ,YAAY,KAAM,CAACR,QAAAS,WAAWC,SAAUT,QAAAe,iBACrDC,UAAa,IAAIjB,QAAAkB,UAAU,CACvBC,SAAYb,KAAKC,gBACjBa,WAAc,IAAIpB,QAAAQ,YAAY,GAAG,CAACP,QAAAoB,cAAcf,KAAKC,qBAEzDe,IAAO,IAAItB,QAAAQ,YAAY,IACvBe,UAAa,IAAIvB,QAAAQ,YAAY,MAuCjC,OArDEgB,OAAAC,eAAIvB,EAAAwB,UAAA,gBAAa,KAAjB,WACE,OAAOpB,KAAKM,kBAAkBe,SAAoB,2CAoBpDzB,EAAAwB,UAAAE,SAAA,aAGA1B,EAAAwB,UAAAG,eAAA,WAAA,IAAAC,EAAAxB,KACIyB,QAAQC,IAAI1B,KAAKM,kBAAkBqB,OAE7B,IAAAC,EAAA5B,KAAAM,kBAAAqB,MAACnB,EAAAoB,EAAApB,SAAUC,EAAAmB,EAAAnB,MAAOE,EAAAiB,EAAAjB,UAAWK,EAAAY,EAAAZ,IAAKC,EAAAW,EAAAX,UAElCY,EAAsB,CAC1BrB,SAAUA,EACVC,MAAOA,EACPI,SAAUF,EAAUE,UAKlBG,IACFa,EAAU,IAAIZ,EAAYD,GAG5BS,QAAQC,IAAIG,GAEZ7B,KAAKF,YAAYgC,UAAUD,GAAME,UAAU,CAEzCC,KAAM,SAACC,GAAS,OAAAT,EAAKzB,OAAOmC,SAAS,CAAC,WACtCC,MAAO,SAACC,GACNX,QAAQU,MAAMC,GACdZ,EAAKa,aAAe1C,QAAA2C,8BArDjB1C,EAAiB2C,WAAA,CAL7B/C,OAAAgD,UAAU,CACTC,SAAU,eACVC,YAAa,4BACbC,UAAW,CAAC,+BAED/C,GAAb,GAAagD,QAAAhD,kBAAAA","file":"register.component.min.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { FormBuilder, FormControl, FormGroup, Validators } from '@angular/forms';\nimport { Router } from '@angular/router';\nimport { AuthService } from 'src/app/core/auth.service';\nimport { CreateUserDto, UserService } from 'src/app/core/user.service';\nimport { emailValidator, passwordMatch, SERVICE_UNAVAILABLE_ERROR } from 'src/app/utils';\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.css']\n})\nexport class RegisterComponent implements OnInit {\n\n\n  errorMessage: string;\n\n  get passwordGroup() : FormGroup {\n    return this.registerFormGroup.controls['passwords'] as FormGroup;\n  }\n\n  passwordControl = new FormControl(null, [Validators.required, Validators.minLength(5)]);\n\n  registerFormGroup: FormGroup = this.formBuilder.group({\n    'username': new FormControl(null, [Validators.required, Validators.minLength(5)]),\n    'email': new FormControl(null, [Validators.required, emailValidator]),\n    'passwords': new FormGroup({\n        'password': this.passwordControl,\n        \"rePassword\": new FormControl('',[passwordMatch(this.passwordControl)]),\n    }),\n    'tel': new FormControl(''),\n    'telRegion': new FormControl('')\n  })\n\n  constructor(private formBuilder: FormBuilder, \n    private authService: AuthService,\n    private router: Router) { }\n\n  ngOnInit(): void {\n  }\n\n  handleRegister() {\n      console.log(this.registerFormGroup.value);\n\n      const {username, email, passwords, tel, telRegion} = this.registerFormGroup.value;\n\n      const body: CreateUserDto = {\n        username: username,\n        email: email,\n        password: passwords.password,\n        // ...(!!tel && {tel: telRegion+tel})\n\n      }\n\n      if (tel) {\n        body['tel'] = telRegion + tel;\n      }\n\n      console.log(body);\n\n      this.authService.register$(body).subscribe({\n\n        next: (data) => this.router.navigate(['/home']),\n        error: (err) => {\n          console.error(err);\n          this.errorMessage = SERVICE_UNAVAILABLE_ERROR;\n        }\n      })\n  }\n\n}\n"]}