{"version":3,"sources":["auth.interceptor.ts"],"names":["core_1","require","http_1","rxjs_1","AuthInterceptor","authService","this","prototype","intercept","request","next","_this","console","log","handle","pipe","tap","response","HttpResponse","url","endsWith","newlyLoggedUser","body","handleLogin","handleLogout","undefined","__decorate","Injectable","exports"],"mappings":"6YAAA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,wBAOAE,OAAAF,QAAA,QAKAG,gBAAA,WAEE,SAAAA,EAAoBC,GAAAC,KAAAD,YAAAA,EAiBtB,OAfED,EAAAG,UAAAC,UAAA,SAAUC,EAA+BC,GAAzC,IAAAC,EAAAL,KAIE,OAFAM,QAAQC,IAAI,oBAELH,EAAKI,OAAOL,GAASM,KAAKZ,OAAAa,IAAI,SAAAC,GACjC,GAAIA,aAAoBf,OAAAgB,aACpB,GAAID,EAASE,IAAIC,SAAS,UAAYH,EAASE,IAAIC,SAAS,YAAa,CACvE,IAAMC,EAAyBJ,EAASK,KACxCX,EAAKN,YAAYkB,YAAYF,QACpBJ,EAASE,IAAIC,SAAS,WAC/BT,EAAKN,YAAYmB,kBAAaC,OAd/BrB,EAAesB,WAAA,CAD3B1B,OAAA2B,cACYvB,GAAb,GAAawB,QAAAxB,gBAAAA","file":"auth.interceptor.min.js","sourcesContent":["import { Injectable } from '@angular/core';\nimport {\n  HttpRequest,\n  HttpHandler,\n  HttpEvent,\n  HttpInterceptor,\n  HttpResponse\n} from '@angular/common/http';\nimport { Observable, tap } from 'rxjs';\nimport { IUser } from '../interfaces';\nimport { AuthService } from './auth.service';\n\n@Injectable()\nexport class AuthInterceptor implements HttpInterceptor {\n\n  constructor(private authService: AuthService) {}\n\n  intercept(request: HttpRequest<unknown>, next: HttpHandler): Observable<HttpEvent<unknown>> {\n\n    console.log('auth interceptor');\n    \n    return next.handle(request).pipe(tap(response => {\n        if (response instanceof HttpResponse) {\n            if (response.url.endsWith(\"login\") || response.url.endsWith(\"register\")) {\n              const newlyLoggedUser: IUser = response.body as IUser;\n              this.authService.handleLogin(newlyLoggedUser);\n            } else if (response.url.endsWith(\"logout\")) {\n              this.authService.handleLogout(undefined);\n            } \n        }\n    }));\n  }\n}\n"]}