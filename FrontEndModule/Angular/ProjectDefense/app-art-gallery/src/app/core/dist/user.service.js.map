{"version":3,"sources":["user.service.ts"],"names":[],"mappings":";;;;;;;;AACA,sCAA2C;AAC3C,6BAA4C;AAC5C,4DAA2D;AAU3D;IAME,qBAAoB,UAAsB;QAAtB,eAAU,GAAV,UAAU,CAAY;QAJ1C,eAAU,GAAW,IAAI,CAAC,YAAY,CAAC;IAIO,CAAC;IAE/C,4BAAM,GAAN;QACE,4CAA4C;IAC9C,CAAC;IAED,4BAAM,GAAN,UAAO,QAA4C;QAAnD,iBAUC;QATC,6CAA6C;QAC7C,OAAO,IAAI,CAAC,UAAU;YACtB,IAAI,CAAW,yBAAW,CAAC,MAAM,WAAQ,EAAC,QAAQ,EAAE,EAAC,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC;aAChG,IAAI,CACH,UAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,EACtC,UAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,EAC9B,UAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,GAAG,IAAI,EAAvB,CAAuB,CAAC,CAEnC,CAAC;IACN,CAAC;IAED,sBAAI,qCAAY;aAAhB;YACE,OAAO,CAAC,CAAC,IAAI,CAAC,WAAW,CAAC;QAC5B,CAAC;;;OAAA;IAED,+BAAS,GAAT,UAAU,QAAuB;QAE/B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAW,yBAAW,CAAC,MAAM,cAAW,EAAE,QAAQ,EAAC,EAAC,eAAe,EAAC,IAAI,EAAC,CAAC,CAAC;IACxG,CAAC;IAED,iCAAW,GAAX;QAAA,iBAIC;QAFC,OAAO,IAAI,CAAC,UAAU;YACtB,GAAG,CAAW,yBAAW,CAAC,MAAM,mBAAgB,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC,IAAI,CAAC,UAAG,CAAC,UAAA,IAAI,IAAI,OAAA,KAAI,CAAC,WAAW,GAAC,IAAI,EAArB,CAAqB,CAAC,CAAC,CAAC;IACtH,CAAC;IArCU,WAAW;QAHvB,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,WAAW,CAsCvB;IAAD,kBAAC;CAtCD,AAsCC,IAAA;AAtCY,kCAAW","file":"user.service.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUser } from '../interfaces';\n\nexport interface CreateUserDto {\n  username: string, email: string, password: string, tel?:string\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  isLoggedIn:boolean = this.isUserLogged;\n\n  currentUser!: IUser;\n  \n  constructor(private httpClient: HttpClient) { }\n\n  logout() {\n    // localStorage.setItem('isLogged', \"true\");\n  }\n\n  login$(userData : {email: string, password: string}) : Observable<IUser> {\n    // localStorage.setItem('isLogged', \"false\");\n    return this.httpClient.\n    post<IUser>(`${environment.apiUrl}/login`,userData, {withCredentials: true, observe: 'response'})\n    .pipe(\n      tap(response => console.log(response)),\n      map(response => response.body),\n      tap(user => this.currentUser = user)\n\n      );\n  }\n\n  get isUserLogged() : boolean {\n    return !!this.currentUser;\n  }\n\n  register$(userData: CreateUserDto) : Observable<IUser> {\n\n    return this.httpClient.post<IUser>(`${environment.apiUrl}/register`, userData,{withCredentials:true});\n  }\n\n  getProfile$() : Observable<IUser> {\n\n    return this.httpClient.\n    get<IUser>(`${environment.apiUrl}/users/profile`, {withCredentials: true}).pipe(tap(user => this.currentUser=user));\n  }\n}\n"]}