{"version":3,"sources":["auth.service.ts"],"names":["core_1","require","rxjs_1","environment_1","_store_1","AuthService","httpClient","store","this","currentUser$","select","globalState","currentUser","isLoggedIn$","pipe","map","user","prototype","handleLogin","newUser","dispatch","login","handleLogout","logout","login$","userData","post","environment","apiUrl","withCredentials","observe","tap","response","console","log","body","authenticate$","_this","get","currentProfile","catchError","err","EMPTY","logout$","register$","__decorate","Injectable","providedIn","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,QACAE,cAAAF,QAAA,gCAIAG,SAAAH,QAAA,aAKAI,YAAA,WAME,SAAAA,EAAoBC,EAAgCC,GAAhCC,KAAAF,WAAAA,EAAgCE,KAAAD,MAAAA,EAJpDC,KAAAC,aAAeD,KAAKD,MAAMG,OAAO,SAAAC,GAAe,OAAAA,EAAYC,cAE5DJ,KAAAK,YAAcL,KAAKC,aAAaK,KAAKZ,OAAAa,IAAI,SAAAC,GAAQ,QAAEA,KA6CrD,OAzCEX,EAAAY,UAAAC,YAAA,SAAYC,GACVX,KAAKD,MAAMa,SAAShB,SAAAiB,MAAM,CAACL,KAAMG,MAGnCd,EAAAY,UAAAK,aAAA,SAAaH,GACXX,KAAKD,MAAMa,SAAShB,SAAAmB,WAGtBlB,EAAAY,UAAAO,OAAA,SAAOC,GAEL,OAAOjB,KAAKF,WACZoB,KAAevB,cAAAwB,YAAYC,OAAM,SAASH,EAAU,CAACI,iBAAiB,EAAMC,QAAS,aACpFhB,KACCZ,OAAA6B,IAAI,SAAAC,GAAY,OAAAC,QAAQC,IAAIF,KAC5B9B,OAAAa,IAAI,SAAAiB,GAAY,OAAAA,EAASG,SAI7B9B,EAAAY,UAAAmB,cAAA,WAAA,IAAAC,EAAA7B,KAEE,OAAOA,KAAKF,WACZgC,IAAcnC,cAAAwB,YAAYC,OAAM,iBAAkB,CAACC,iBAAiB,IACnEf,KACCZ,OAAA6B,IAAI,SAAAQ,GAAkB,OAAAF,EAAKnB,YAAYqB,KACvCrC,OAAAsC,WAAW,SAAAC,GACT,OAAOvC,OAAAwC,UAKbrC,EAAAY,UAAA0B,QAAA,WAGE,OADAV,QAAQC,IAAI,iBACL1B,KAAKF,WACZoB,KAAcvB,cAAAwB,YAAYC,OAAM,UAAW,GAAI,CAACC,iBAAiB,KAGnExB,EAAAY,UAAA2B,UAAA,SAAUnB,GAER,OAAOjB,KAAKF,WAAWoB,KAAevB,cAAAwB,YAAYC,OAAM,YAAaH,EAAS,CAACI,iBAAgB,KA/CtFxB,EAAWwC,WAAA,CAHvB7C,OAAA8C,WAAW,CACVC,WAAY,UAED1C,GAAb,GAAa2C,QAAA3C,YAAAA","file":"auth.service.min.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap, map, BehaviorSubject, catchError, EMPTY } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { CreateUserDto } from './user.service';\nimport { IUser } from '../interfaces';\nimport { Store } from '@ngrx/store';\nimport { IRootState, login, logout } from '../+store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  currentUser$ = this.store.select(globalState => globalState.currentUser);\n\n  isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\n\n  constructor(private httpClient: HttpClient, private store: Store<IRootState>) { }\n\n  handleLogin(newUser: IUser) {\n    this.store.dispatch(login({user: newUser}));\n  }\n\n  handleLogout(newUser: IUser) {\n    this.store.dispatch(logout());\n  }\n\n  login$(userData : {email: string, password: string}) : Observable<IUser> {\n\n    return this.httpClient.\n    post<IUser>(`${environment.apiUrl}/login`,userData, {withCredentials: true, observe: 'response'})\n    .pipe(\n      tap(response => console.log(response)),\n      map(response => response.body),\n      );\n  }\n\n  authenticate$() : Observable<IUser> {\n\n    return this.httpClient.\n    get<IUser>(`${environment.apiUrl}/users/profile`, {withCredentials: true})\n    .pipe(\n      tap(currentProfile => this.handleLogin(currentProfile)),\n      catchError(err => {\n        return EMPTY;\n      }),\n      );\n  }\n\n  logout$() : Observable<void> {\n\n    console.log('logout called');\n    return this.httpClient.\n    post<void>(`${environment.apiUrl}/logout`, {}, {withCredentials: true});\n  }\n\n  register$(userData: CreateUserDto) : Observable<IUser> {\n\n    return this.httpClient.post<IUser>(`${environment.apiUrl}/register`, userData,{withCredentials:true});\n  }\n}\n"]}