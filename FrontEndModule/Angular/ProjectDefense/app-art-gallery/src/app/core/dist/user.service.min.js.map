{"version":3,"sources":["user.service.ts"],"names":["core_1","require","rxjs_1","environment_1","UserService","httpClient","this","isLoggedIn","isUserLogged","prototype","logout","login$","userData","_this","post","environment","apiUrl","withCredentials","observe","pipe","tap","response","console","log","map","body","user","currentUser","Object","defineProperty","register$","getProfile$","get","editProfile$","put","__decorate","Injectable","providedIn","exports"],"mappings":"6YACA,IAAAA,OAAAC,QAAA,iBACAC,OAAAD,QAAA,QACAE,cAAAF,QAAA,gCAUAG,YAAA,WAME,SAAAA,EAAoBC,GAAAC,KAAAD,WAAAA,EAJpBC,KAAAC,WAAqBD,KAAKE,aA0C5B,OApCEJ,EAAAK,UAAAC,OAAA,aAIAN,EAAAK,UAAAE,OAAA,SAAOC,GAAP,IAAAC,EAAAP,KAEE,OAAOA,KAAKD,WACZS,KAAeX,cAAAY,YAAYC,OAAM,SAASJ,EAAU,CAACK,iBAAiB,EAAMC,QAAS,aACpFC,KACCjB,OAAAkB,IAAI,SAAAC,GAAY,OAAAC,QAAQC,IAAIF,KAC5BnB,OAAAsB,IAAI,SAAAH,GAAY,OAAAA,EAASI,OACzBvB,OAAAkB,IAAI,SAAAM,GAAQ,OAAAb,EAAKc,YAAcD,MAKnCE,OAAAC,eAAIzB,EAAAK,UAAA,eAAY,KAAhB,WACE,QAASH,KAAKqB,6CAGhBvB,EAAAK,UAAAqB,UAAA,SAAUlB,GAER,OAAON,KAAKD,WAAWS,KAAeX,cAAAY,YAAYC,OAAM,YAAaJ,EAAS,CAACK,iBAAgB,KAGjGb,EAAAK,UAAAsB,YAAA,WAAA,IAAAlB,EAAAP,KAEE,OAAOA,KAAKD,WACZ2B,IAAc7B,cAAAY,YAAYC,OAAM,iBAAkB,CAACC,iBAAiB,IAAOE,KAAKjB,OAAAkB,IAAI,SAAAM,GAAQ,OAAAb,EAAKc,YAAYD,MAG/GtB,EAAAK,UAAAwB,aAAA,SAAarB,GAAb,IAAAC,EAAAP,KAEE,OAAOA,KAAKD,WACZ6B,IAAc/B,cAAAY,YAAYC,OAAM,iBAAkBJ,EAAS,CAACK,iBAAiB,IAAOE,KAAKjB,OAAAkB,IAAI,SAAAM,GAAQ,OAAAb,EAAKc,YAAYD,MA1C7GtB,EAAW+B,WAAA,CAHvBnC,OAAAoC,WAAW,CACVC,WAAY,UAEDjC,GAAb,GAAakC,QAAAlC,YAAAA","file":"user.service.min.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { map, Observable, tap } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { IUser } from '../interfaces';\n\nexport interface CreateUserDto {\n  username: string, email: string, password: string, tel?:string\n}\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n\n  isLoggedIn:boolean = this.isUserLogged;\n\n  currentUser!: IUser;\n  \n  constructor(private httpClient: HttpClient) { }\n\n  logout() {\n    // localStorage.setItem('isLogged', \"true\");\n  }\n\n  login$(userData : {email: string, password: string}) : Observable<IUser> {\n    // localStorage.setItem('isLogged', \"false\");\n    return this.httpClient.\n    post<IUser>(`${environment.apiUrl}/login`,userData, {withCredentials: true, observe: 'response'})\n    .pipe(\n      tap(response => console.log(response)),\n      map(response => response.body),\n      tap(user => this.currentUser = user)\n\n      );\n  }\n\n  get isUserLogged() : boolean {\n    return !!this.currentUser;\n  }\n\n  register$(userData: CreateUserDto) : Observable<IUser> {\n\n    return this.httpClient.post<IUser>(`${environment.apiUrl}/register`, userData,{withCredentials:true});\n  }\n\n  getProfile$() : Observable<IUser> {\n\n    return this.httpClient.\n    get<IUser>(`${environment.apiUrl}/users/profile`, {withCredentials: true}).pipe(tap(user => this.currentUser=user));\n  }\n\n  editProfile$(userData: CreateUserDto) : Observable<IUser> {\n\n    return this.httpClient.\n    put<IUser>(`${environment.apiUrl}/users/profile`, userData,{withCredentials: true}).pipe(tap(user => this.currentUser=user));\n  }\n}\n"]}