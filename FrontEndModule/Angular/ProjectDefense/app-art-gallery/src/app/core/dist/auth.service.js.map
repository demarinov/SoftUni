{"version":3,"sources":["auth.service.ts"],"names":[],"mappings":";;;;;;;;AACA,sCAA2C;AAC3C,6BAAgF;AAChF,4DAA2D;AAI3D,oCAAsD;AAKtD;IAME,qBAAoB,UAAsB,EAAU,KAAwB;QAAxD,eAAU,GAAV,UAAU,CAAY;QAAU,UAAK,GAAL,KAAK,CAAmB;QAJ5E,iBAAY,GAAG,IAAI,CAAC,KAAK,CAAC,MAAM,CAAC,UAAA,WAAW,IAAI,OAAA,WAAW,CAAC,WAAW,EAAvB,CAAuB,CAAC,CAAC;QAEzE,gBAAW,GAAG,IAAI,CAAC,YAAY,CAAC,IAAI,CAAC,UAAG,CAAC,UAAA,IAAI,IAAI,OAAA,CAAC,CAAC,IAAI,EAAN,CAAM,CAAC,CAAC,CAAC;IAEsB,CAAC;IAEjF,iCAAW,GAAX,UAAY,OAAc;QACxB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,cAAK,CAAC,EAAC,IAAI,EAAE,OAAO,EAAC,CAAC,CAAC,CAAC;IAC9C,CAAC;IAED,kCAAY,GAAZ,UAAa,OAAc;QACzB,IAAI,CAAC,KAAK,CAAC,QAAQ,CAAC,eAAM,EAAE,CAAC,CAAC;IAChC,CAAC;IAED,4BAAM,GAAN,UAAO,QAA4C;QAEjD,OAAO,IAAI,CAAC,UAAU;YACtB,IAAI,CAAW,yBAAW,CAAC,MAAM,WAAQ,EAAC,QAAQ,EAAE,EAAC,eAAe,EAAE,IAAI,EAAE,OAAO,EAAE,UAAU,EAAC,CAAC;aAChG,IAAI,CACH,UAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,OAAO,CAAC,GAAG,CAAC,QAAQ,CAAC,EAArB,CAAqB,CAAC,EACtC,UAAG,CAAC,UAAA,QAAQ,IAAI,OAAA,QAAQ,CAAC,IAAI,EAAb,CAAa,CAAC,CAC7B,CAAC;IACN,CAAC;IAED,mCAAa,GAAb;QAAA,iBAUC;QARC,OAAO,IAAI,CAAC,UAAU;YACtB,GAAG,CAAW,yBAAW,CAAC,MAAM,mBAAgB,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC;aACzE,IAAI,CACH,UAAG,CAAC,UAAA,cAAc,IAAI,OAAA,KAAI,CAAC,WAAW,CAAC,cAAc,CAAC,EAAhC,CAAgC,CAAC,EACvD,iBAAU,CAAC,UAAA,GAAG;YACZ,OAAO,YAAK,CAAC;QACf,CAAC,CAAC,CACD,CAAC;IACN,CAAC;IAED,6BAAO,GAAP;QAEE,OAAO,CAAC,GAAG,CAAC,eAAe,CAAC,CAAC;QAC7B,OAAO,IAAI,CAAC,UAAU;YACtB,IAAI,CAAU,yBAAW,CAAC,MAAM,YAAS,EAAE,EAAE,EAAE,EAAC,eAAe,EAAE,IAAI,EAAC,CAAC,CAAC;IAC1E,CAAC;IAED,+BAAS,GAAT,UAAU,QAAuB;QAE/B,OAAO,IAAI,CAAC,UAAU,CAAC,IAAI,CAAW,yBAAW,CAAC,MAAM,cAAW,EAAE,QAAQ,EAAC,EAAC,eAAe,EAAC,IAAI,EAAC,CAAC,CAAC;IACxG,CAAC;IAhDU,WAAW;QAHvB,iBAAU,CAAC;YACV,UAAU,EAAE,MAAM;SACnB,CAAC;OACW,WAAW,CAiDvB;IAAD,kBAAC;CAjDD,AAiDC,IAAA;AAjDY,kCAAW","file":"auth.service.js","sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, tap, map, BehaviorSubject, catchError, EMPTY } from 'rxjs';\nimport { environment } from 'src/environments/environment';\nimport { CreateUserDto } from './user.service';\nimport { IUser } from '../interfaces';\nimport { Store } from '@ngrx/store';\nimport { IRootState, login, logout } from '../+store';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n\n  currentUser$ = this.store.select(globalState => globalState.currentUser);\n\n  isLoggedIn$ = this.currentUser$.pipe(map(user => !!user));\n\n  constructor(private httpClient: HttpClient, private store: Store<IRootState>) { }\n\n  handleLogin(newUser: IUser) {\n    this.store.dispatch(login({user: newUser}));\n  }\n\n  handleLogout(newUser: IUser) {\n    this.store.dispatch(logout());\n  }\n\n  login$(userData : {email: string, password: string}) : Observable<IUser> {\n\n    return this.httpClient.\n    post<IUser>(`${environment.apiUrl}/login`,userData, {withCredentials: true, observe: 'response'})\n    .pipe(\n      tap(response => console.log(response)),\n      map(response => response.body),\n      );\n  }\n\n  authenticate$() : Observable<IUser> {\n\n    return this.httpClient.\n    get<IUser>(`${environment.apiUrl}/users/profile`, {withCredentials: true})\n    .pipe(\n      tap(currentProfile => this.handleLogin(currentProfile)),\n      catchError(err => {\n        return EMPTY;\n      }),\n      );\n  }\n\n  logout$() : Observable<void> {\n\n    console.log('logout called');\n    return this.httpClient.\n    post<void>(`${environment.apiUrl}/logout`, {}, {withCredentials: true});\n  }\n\n  register$(userData: CreateUserDto) : Observable<IUser> {\n\n    return this.httpClient.post<IUser>(`${environment.apiUrl}/register`, userData,{withCredentials:true});\n  }\n}\n"]}